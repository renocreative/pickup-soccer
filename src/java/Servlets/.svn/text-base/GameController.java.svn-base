/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package Servlets;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Collection;
import java.util.Date;
import DAL.Game;
import DAL.Location;
import DAL.DBHelper;
import java.util.Map;

/**
 *
 * @author Renaud
 */
public class GameController extends HttpServlet {
   
    /** 
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();

        DBHelper db = new DBHelper();
        try {
            String nextPage = null;

            //Identify the business process to execute
            String operation = request.getParameter("operation");

            if(operation != null){ //A dynamic page is requested
                //The client requests to access the list of existing games
                if(operation.equals("listOfGames")){
                    //Retrieve from DB, all games with gameStatus to ON
                    Collection<Game> games = db.getAllGames(); //DB access
                    //set up the result as request parameter
                    request.setAttribute("games", games);
                    //Define the page to render to the user
                    nextPage = "ListOfGames.jsp";

                }else //The client requests the server to send the page to create a game
                if(operation.equals("createGame")){
                   nextPage = "CreateGame.jsp";
                }else{
                   //Do nothing;
                }
            }else if(operation == null){ //A form is submitted

                        String submit = request.getParameter("submit");
                        if (submit != null){
                            if (submit.equals("create")){
                                //Create a Game object with form inputs
                                Map<String, String[]> gameAttrs = request.getParameterMap();
                                int day = Integer.parseInt(request.getParameter("day"));
                                int month = Integer.parseInt(request.getParameter("month"));
                                int year = Integer.parseInt(request.getParameter("year"));

                                //Extract time components
                                int minute = Integer.parseInt(request.getParameter("minute"));
                                int hour = Integer.parseInt(request.getParameter("hour"));
                                String ampm = request.getParameter("ampm");

                                //Extract location info
                                String fieldName = request.getParameter("field");
                                String address = request.getParameter("address") + ", " + request.getParameter("city");

                                Game game = ModelBinder.createGame(gameAttrs, day, month, year, hour, minute, ampm, fieldName, address);
                                
                                //Persist the object in the DB
                                try{
                                    db.saveOrUpdateGame(game);
                                }catch(Exception e){
                                    e.printStackTrace();
                                }

                                //Retrieve from DB, all games with gameStatus to ON
                                Collection<Game> games = db.getAllGames(); //DB access
                                //set up the result as request parameter
                                request.setAttribute("games", games);

                                //Define the page to render to the user
                                nextPage = "Home.jsp";

                            }else if (submit.equals("View Info")){
                                String location = (String)request.getParameter("location");
                                String dt = request.getParameter("dateTime");
                                Date dateTime = new Date(dt);

                                //Retrieve Game object with form inputs
                                Game game = db.getGame(location, dateTime);

                                //set up the result as request parameter
                                request.setAttribute("game", game);

                                //Define the page to render to the user
                                nextPage = "Home.jsp";
                            }
                        }else{
                            //Retrieve from DB, all games with gameStatus to ON
                            Collection<Game> games = db.getAllGames(); //DB access

                            //set up the result as request parameter
                            request.setAttribute("games", games);

                            //Define the page to render to the user
                            nextPage = "Home.jsp";
                        }
                    }
                    RequestDispatcher dispatcher = request.getRequestDispatcher(nextPage);
                    dispatcher.forward(request, response);

        } finally {
            out.close();
        }

    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method..
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    } 

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
